# -*- mode: org -*-
# -*- coding: utf-8 -*-
#+TITLE:    Emacs configuration file
#+AUTHOR:   Simon Gregersen
#+PROPERTY: header-args :tangle yes

* Setup
** Editing init.org
#+BEGIN_SRC emacs-lisp
(defun find-config ()
  "Edit init.org"
  (interactive)
  (find-file (concat user-emacs-directory "init.org")))

(global-set-key (kbd "C-c I") 'find-config)

(defun load-init ()
  "Run tangle, load and byte-compile init.org"
  (interactive)
  (find-file (concat user-emacs-directory "init.org"))
  (org-babel-tangle)
  (load-file (concat user-emacs-directory "init.el"))
  (byte-compile-file (concat user-emacs-directory "init.el")))
#+END_SRC

** Package repositories
#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'load-path (expand-file-name "lib" user-emacs-directory))

(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)

(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))
(setq package-enable-at-startup nil)

(package-initialize)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(require 'gnutls)
(add-to-list 'gnutls-trustfiles "/usr/local/etc/openssl/cert.pem")
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC

** Use package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(require 'bind-key)

(setq use-package-always-ensure t)

(require 'subr-x)
#+END_SRC

** Execution path from shell
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))

(setq default-directory "~/")
#+END_SRC

* Preferences

** Time
#+BEGIN_SRC emacs-lisp
(setq-default
 display-time 1
 display-time-24hr-format t
 display-time-day-and-date nil
 display-time-default-load-average nil)
(display-time-mode)
#+END_SRC

** Global clipboard
#+BEGIN_SRC emacs-lisp
(setq select-enable-clipboard t
      select-enable-primary t)
#+END_SRC

** macOS
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)
(setq locate-command "mdfind")
(setq ns-pop-up-frames nil)
;; Some mac-bindings interfere with Emacs bindings.
(when (boundp 'mac-pass-command-to-system)
      (setq mac-pass-command-to-system nil))

(cond
 ((eq window-system 'ns) ; macosx
  ;; Invoke login shells, so that .profile or .bash_profile is read
  (setq shell-command-switch "-lc")
  (setq dired-use-ls-dired nil)
))

(defun toggle-fullscreen (&optional f)
  (interactive)
  (let ((current-value (frame-parameter nil 'fullscreen)))
    (set-frame-parameter nil 'fullscreen
      (if (equal 'fullboth current-value)
        (if (boundp 'old-fullscreen) old-fullscreen nil)
        (progn (setq old-fullscreen current-value)
          'fullboth)))))
(global-set-key [f12] 'toggle-frame-fullscreen)
#+END_SRC

** Autosave
#+BEGIN_SRC emacs-lisp
(defconst emacs-tmp-dir (format "%s/%s/" user-emacs-directory "backup"))
(setq backup-directory-alist `((".*" . ,emacs-tmp-dir)))
(setq auto-save-file-name-transforms `((".*" ,emacs-tmp-dir t)))
(setq auto-save-list-file-prefix emacs-tmp-dir)
#+END_SRC

** SSH
#+BEGIN_SRC emacs-lisp
(use-package crux)
(use-package s)

(defun my--reopen-remote-file-as-root ()
  "Reopen a remote file as root over tramp."
  (find-alternate-file (let* ((parts (s-split ":" buffer-file-name))
            (hostname (nth 1 parts))
            (filepath (car (last parts))))
           (concat "/ssh" ":" hostname "|" "sudo" ":" hostname ":" filepath))))


(defun my/reopen-file-as-root ()
  "Reopen a local or remote file as root."
  (interactive)
  (if (file-remote-p default-directory)
      (progn
    (my--reopen-remote-file-as-root)))
  (crux-reopen-as-root))
#+END_SRC

** Custom-file
#+BEGIN_SRC emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file)
#+END_SRC

** Ignored file extensions
#+BEGIN_SRC emacs-lisp
(push ".aux" completion-ignored-extensions) ;; latex
(push ".vo" completion-ignored-extensions)
(push ".vok" completion-ignored-extensions)
(push ".vos" completion-ignored-extensions)

#+END_SRC

** Miscellaneous
#+BEGIN_SRC emacs-lisp
(setq frame-title-format '("" "%b @ %f"))        ; window title
(setq inhibit-startup-message t)     ; dont show the GNU splash screen
(transient-mark-mode t)              ; show selection from mark
(if (display-graphic-p)
    (progn
      (tool-bar-mode -1)             ; enable/disable toolbar
      (menu-bar-mode 1)              ; enable/disable menu bar
      (scroll-bar-mode -1)))         ; disable scroll bar
(blink-cursor-mode 0)                ; disable blinking cursor
(mouse-avoidance-mode 'jump)         ; jump mouse away when typing
(setq visible-bell nil)                ; turn off bip warnings
(setq ring-bell-function 'ignore)
(auto-compression-mode 1)            ; browse tar archives
(put 'upcase-region 'disabled nil)   ; enable ``upcase-region''
(put 'set-goal-column 'disabled nil) ; enable column positioning
(setq column-number-mode t)          ; show column number
(setq case-fold-search t)            ; make search ignore case
; (global-linum-mode 0)                ; global line numbers
(fset 'yes-or-no-p 'y-or-n-p)        ; short-hand yes/no selection
(ido-mode 1)                         ; interactive DO mode (better file opening and buffer switching)
(setq-default indent-tabs-mode nil)  ; tabs over spaces
(delete-selection-mode +1)           ; type over a selected region, instead of deleting before typing.
(add-to-list 'default-frame-alist '(fullscreen . maximized)) ; start full screen
(global-auto-revert-mode t)          ; automatically reload buffers when file has changed

(global-unset-key (kbd "<M-drag-mouse-1>"))   ; was mouse-set-secondary
(global-unset-key (kbd "<M-down-mouse-1>"))   ; was mouse-drag-secondary
(global-unset-key (kbd "<M-mouse-1>"))        ; was mouse-start-secondary
(global-unset-key (kbd "<M-mouse-2>"))        ; was mouse-yank-secondary
(global-unset-key (kbd "<M-mouse-3>"))        ; was mouse-secondary-save-then-kill

(setq-default fill-column 80)       ; default fill-column width, standard is 80

;; (add-hook 'focus-out-hook (lambda () (interactive) (save-some-buffers t)))
#+END_SRC

** Ivy + Swiper + Counsel
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :demand
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-height 12)
  (setq ivy-count-format "%d/%d | ")
  (setq ivy-extra-directories nil)
  (setq ivy-display-style 'fancy)
  (setq magit-completing-read-function 'ivy-completing-read)

  (defun save-ivy-views ()
    "Save all current Ivy views to file."
    (interactive)
    (with-temp-file "~/.emacs.d/ivy-views"
    (prin1 ivy-views (current-buffer))
    (message "saving ivy-views to ~/.emacs.d/ivy-views")))

  (defun load-ivy-views ()
    "Load all stored Ivy views."
    (interactive)
    (if (file-exists-p "~/.emacs.d/ivy-views")
        (setq ivy-views
          (with-temp-buffer
            (insert-file-contents "~/.emacs.d/ivy-views")
            (read (current-buffer)))))
    (message "load ivy-views"))
  (load-ivy-views)
)

(use-package swiper
  :demand
  :config
  )

(use-package counsel
  :demand
  :defer t
  :bind*
  (( "C-s" . counsel-grep-or-swiper)
   ( "M-g g" . counsel-rg)
   ( "M-i" . counsel-imenu)
   ( "M-x" . counsel-M-x)
   ( "C-x C-f" . counsel-find-file)
   ( "<f1> f" . counsel-describe-function)
   ( "<f1> v" . counsel-describe-variable)
   ( "<f1> l" . counsel-load-library)
   ( "<f2> i" . counsel-info-lookup-symbol)
   ( "<f2> u" . counsel-unicode-char)
   ( "C-h b" . counsel-descbinds)
   ( "C-c g" . counsel-git)
   ( "C-c j" . counsel-git-grep)
   ( "C-c k" . counsel-ag)
   ( "C-x l" . locate-counsel)
   ( "C-r" . ivy-resume)
   ( "C-c v" . ivy-push-view)
   ( "C-c V" . ivy-pop-view)
   ( "C-c w" . ivy-switch-view)
   ( "C-x b" . ivy-switch-buffer)
   ( "C-c g" . counsel-git)
   ("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)
   )
   :config
   (setq counsel-find-file-ignore-regexp "\\.vo\\|\\.aux\\|\\.glob\\|.DS_STORE")
   )

(use-package wgrep)
#+END_SRC
* Appearance
** Fonts
#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

;; set a default font
(when (member "DejaVu Sans Mono" (font-family-list))
  (let ((my-font "DejaVu Sans Mono-12"))
    (set-face-attribute 'default nil :font my-font)
    (set-fontset-font t 'unicode my-font nil 'prepend)
    ))

#+END_SRC
** Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :config (powerline-default-theme))
#+END_SRC

** Doom themes
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons) ; 'M-x all-the-icons-install-fonts' to install resource fonts
(use-package doom-themes
  :init
  (load-theme 'doom-solarized-light
              t)
  (doom-themes-neotree-config)
  (global-hl-line-mode t)
)
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (setq company-idle-delay 0
        company-echo-delay 0
        company-dabbrev-downcase nil
        company-minimum-prefix-length 3
        company-tooltip-limit 20
        company-selection-wrap-around t
        company-transformers '(company-sort-by-occurrence
                               company-sort-by-backend-importance))
  (define-key company-mode-map (kbd "C-M-i") 'company-indent-or-complete-common)
  (global-company-mode))
#+END_SRC

** Neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :config
  (setq neo-smart-open t)
  (global-set-key [f8] 'neotree-toggle))
#+END_SRC

** Popwin
#+BEGIN_SRC emacs-lisp
(use-package popwin
  :config
  (global-set-key (kbd "C-z") popwin:keymap)
  (add-to-list 'popwin:special-display-config `("*Swoop*" :height 0.5 :position bottom))
  (add-to-list 'popwin:special-display-config `("*\.\* output*" :height 0.5 :noselect t :position bottom))

  ;; (add-to-list 'popwin:special-display-config `(".pdf" :regexp t :width 0.5 :noselect t :position right :stick t))
  (add-to-list 'popwin:special-display-config `("*Warnings*" :height 0.5 :noselect t))
  (add-to-list 'popwin:special-display-config `("*TeX Help*" :height 0.5 :noselect t))
  (add-to-list 'popwin:special-display-config `("*ENSIME Welcome*" :height 0.5 :noselect t))
  (add-to-list 'popwin:special-display-config `("\*sbt\*" :regexp t :height 0.3 :noselect t))
  (add-to-list 'popwin:special-display-config `("*Procces List*" :height 0.5))
  (add-to-list 'popwin:special-display-config `("*Messages*" :height 0.5 :noselect t))
  (add-to-list 'popwin:special-display-config `("*Help*" :height 0.5 :noselect nil))
  (add-to-list 'popwin:special-display-config `("*Backtrace*" :height 0.5))
  (add-to-list 'popwin:special-display-config `("*Compile-Log*" :height 0.5 :noselect t))
  (add-to-list 'popwin:special-display-config `("*Remember*" :height 0.5))
  (add-to-list 'popwin:special-display-config `("*ansi-term*" :height 0.5 :position top))
  (add-to-list 'popwin:special-display-config `("*All*" :height 0.5))
  (add-to-list 'popwin:special-display-config `("*Go Test*" :height 0.3))
  (add-to-list 'popwin:special-display-config `("*Slack -" :regexp t :height 0.5 :position bottom))
  (add-to-list 'popwin:special-display-config `(flycheck-error-list-mode :height 0.5 :regexp t :position bottom))
  (add-to-list 'popwin:special-display-config `("*compilation*" :width 0.5 :position right))
  (popwin-mode 1))

#+END_SRC

** Flyspell
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
(setq flyspell-issue-message-flag nil)
(define-key ctl-x-map "\C-i"
  #'endless/ispell-word-then-abbrev)

(defun endless/simple-get-word ()
  (car-safe (save-excursion (ispell-get-word nil))))

(defun endless/ispell-word-then-abbrev (p)
  "Call `ispell-word', then create an abbrev for it.
With prefix P, create local abbrev. Otherwise it will
be global.
If there's nothing wrong with the word at point, keep
looking for a typo until the beginning of buffer. You can
skip typos you don't want to fix with `SPC', and you can
abort completely with `C-g'."
  (interactive "P")
  (let (bef aft)
    (save-excursion
      (while (if (setq bef (endless/simple-get-word))
                 ;; Word was corrected or used quit.
                 (if (ispell-word nil 'quiet)
                     nil ; End the loop.
                   ;; Also end if we reach `bob'.
                   (not (bobp)))
               ;; If there's no word at point, keep looking
               ;; until `bob'.
               (not (bobp)))
        (backward-word)
        (backward-char))
      (setq aft (endless/simple-get-word)))
    (if (and aft bef (not (equal aft bef)))
        (let ((aft (downcase aft))
              (bef (downcase bef)))
          (define-abbrev
            (if p local-abbrev-table global-abbrev-table)
            bef aft)
          (message "\"%s\" now expands to \"%s\" %sally"
                   bef aft (if p "loc" "glob")))
      (user-error "No typo at or before point"))))

(setq save-abbrevs 'silently)
#+END_SRC

** Undo tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :bind (("C-x u" . undo-tree-visualize)
         ("C--" . undo)
         ("C-+" . redo))
  :init
  (setq undo-tree-visualizer-diff 1)
  (global-undo-tree-mode))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :config
  (setq projectile-mode-line
        '(:eval (if (projectile-project-p)
                    (format " [%s]"
                            (projectile-project-name))
                  "")))
  (setq projectile-completion-system 'ivy)
  (projectile-mode)
  )
#+END_SRC
* Coding
** LaTeX
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :mode ("\\.pdf\\'" . pdf-tools-install)
  :bind (("C-c C-g" . pdf-sync-forward-search)
         ;; use normal isearch
         (:map pdf-view-mode-map
               ("C-s" . isearch-forward)
               ("C-r" . isearch-backward))
         )
  :defer t
  :config
  (setq mouse-wheel-follow-mouse t)
  ;; open pdfs scaled to fit page
  ;; (setq-default pdf-view-display-size 'fit-page)
  ;; (setq pdf-view-resize-factor 1.5)
  ;; no line numbers on pdfs
  (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
  )

(defun run-latex ()
  (interactive)
  (let ((process (TeX-active-process))) (if process (delete-process process)))
  (let ((TeX-save-query nil)) (TeX-save-document ""))
  (TeX-command-menu "LaTeX"))

(use-package tex
  :pin gnu
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  ;; :diminish reftex-mode
  :bind (:map TeX-mode-map
              ("C-q" . ales/fill-paragraph)
              ("<C-return>" . TeX-texify))
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq TeX-save-query nil)
  (setq-default TeX-master nil)
  (setq TeX-electric-sub-and-superscript t)
  (setq sentence-end-double-space nil)
  (custom-set-variables '(LaTeX-command "latex -synctex=1"))

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              ;; (local-set-key (kbd "<C-return>") (lambda () (Tex-command-menu "LaTeX")))
              (company-mode)
              ;; (visual-line-mode)
              (flyspell-mode)
              ;; (smartparens-mode)
              (turn-on-reftex)
              (setq reftex-plug-into-AUCTeX t)
              (reftex-isearch-minor-mode)
              (setq TeX-PDF-mode t)
              (setq TeX-source-correlate-method 'synctex)
              (setq TeX-source-correlate-start-server t)))

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (add-hook 'kill-buffer-hook 'TeX-clean nil 'make-it-local)))

  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  ;; to use pdfview with auctex
  (add-hook 'LaTeX-mode-hook 'pdf-tools-install)
  ;; to use pdfview with auctex
  (setq TeX-view-program-selection '((output-pdf "pdf-tools"))
        TeX-source-correlate-start-server t)
  (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))

  (defun ales/fill-paragraph (&optional P)
    "When called with prefix argument call `fill-paragraph'.
       Otherwise split the current paragraph into one sentence per line."
    (interactive "P")
    (if (not P)
        (save-excursion
          (let ((fill-column 12345678)) ;; relies on dynamic binding
            (fill-paragraph) ;; this will not work correctly if the paragraph is
            ;; longer than 12345678 characters (in which case the
            ;; file must be at least 12MB long. This is unlikely.)
            (let ((end (save-excursion
                         (forward-paragraph 1)
                         (backward-sentence)
                         (point-marker))))  ;; remember where to stop
              (beginning-of-line)
              (while (progn (forward-sentence)
                            (<= (point) (marker-position end)))
                (just-one-space) ;; leaves only one space, point is after it
                (delete-char -1) ;; delete the space
                (newline)        ;; and insert a newline
                (LaTeX-indent-line) ;; TODO: fix-this
                ))))
      ;; otherwise do ordinary fill paragraph
      (fill-paragraph P)))
  )

(use-package reftex
  :defer t
  :config
  (setq reftex-cite-prompt-optional-args t)
  (setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))); Prompt for empty optional arguments in cite

(use-package biblio)

(defun TeX-command-default (name)
  "Next TeX command to use. Most of the code is stolen from `TeX-command-query'."
  (cond ((if (string-equal name TeX-region)
             (TeX-check-files (concat name "." (TeX-output-extension))
                              (list name)
                              TeX-file-extensions)
           (TeX-save-document (TeX-master-file)))
         TeX-command-default)
        ((and (memq major-mode '(doctex-mode latex-mode))
              (TeX-check-files (concat name ".bbl")
                               (mapcar 'car
                                       (LaTeX-bibliography-list))
                               BibTeX-file-extensions))
         ;; We should check for bst files here as well.
         TeX-command-BibTeX)
        ((TeX-process-get-variable name
                                   'TeX-command-next
                                   TeX-command-Show))
        (TeX-command-Show)))


(defcustom TeX-texify-Show nil "Start view-command at end of TeX-texify?" :type 'boolean :group 'TeX-command)
(defcustom TeX-texify-max-runs-same-command 5 "Maximal run number of the same command" :type 'integer :group 'TeX-command)

(defun TeX-texify-sentinel (&optional proc sentinel)
  "Non-interactive! Call the standard-sentinel of the current LaTeX-process.
If there is still something left do do start the next latex-command."
  (set-buffer (process-buffer proc))
  (funcall TeX-texify-sentinel proc sentinel)
  (let ((case-fold-search nil))
    (when (string-match "\\(finished\\|exited\\)" sentinel)
      (set-buffer TeX-command-buffer)
      (unless (plist-get TeX-error-report-switches (intern (TeX-master-file)))
        (TeX-texify)))))

(defun TeX-texify ()
  "Get everything done."
  (interactive)
  (let ((nextCmd (TeX-command-default (TeX-master-file)))
        proc)
    (if (and (null TeX-texify-Show)
             (equal nextCmd TeX-command-Show))
        (when  (called-interactively-p 'any)
          (message "TeX-texify: Nothing to be done."))
      (TeX-command nextCmd 'TeX-master-file)
      (when (or (called-interactively-p 'any)
                (null (boundp 'TeX-texify-count-same-command))
                (null (boundp 'TeX-texify-last-command))
                (null (equal nextCmd TeX-texify-last-command)))
        (mapc 'make-local-variable '(TeX-texify-sentinel TeX-texify-count-same-command TeX-texify-last-command))
        (setq TeX-texify-count-same-command 1))
      (if (>= TeX-texify-count-same-command TeX-texify-max-runs-same-command)
          (message "TeX-texify: Did %S already %d times. Don't want to do it anymore." TeX-texify-last-command TeX-texify-count-same-command)
        (setq TeX-texify-count-same-command (1+ TeX-texify-count-same-command))
        (setq TeX-texify-last-command nextCmd)
        (and (null (equal nextCmd TeX-command-Show))
             (setq proc (get-buffer-process (current-buffer)))
             (setq TeX-texify-sentinel (process-sentinel proc))
             (set-process-sentinel proc 'TeX-texify-sentinel))))))

(provide 'TeX-texify)

#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :config
  ;; (defadvice magit-status (around magit-fullscreen activate)
  ;;   (window-configuration-to-register :magit-fullscreen)
  ;;   ad-do-it
  ;;   (delete-other-windows))
  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
  (setq magit-refresh-status-buffer nil)
  (setq vc-handled-backends nil)
  (setq magit-display-buffer-function
        (lambda (buffer)
          (display-buffer
           buffer (if (and (derived-mode-p 'magit-mode)
                           (memq (with-current-buffer buffer major-mode)
                                 '(magit-process-mode
                                   magit-revision-mode
                                   magit-diff-mode
                                   magit-stash-mode
                                   magit-status-mode)))
                      nil
                    '(display-buffer-same-window)))))
  :bind (("C-x g" . magit-status)
         ("C-c g b" . magit-branch-and-checkout)
         ("C-c g c" . magit-checkout)
         ("C-c g l" . magit-log-all)))
#+END_SRC
** Git-gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :config
  (global-git-gutter-mode +1))
#+END_SRC

** Coq
#+BEGIN_SRC emacs-lisp
(use-package proof-general
  ;; :ensure t
  :mode ("\\.v\\'" . coq-mode)
  :init
  ;; remove splash screen
  (setq proof-splash-enable nil)
  ;; window-mode setup
  (setq proof-three-window-mode-policy 'hybrid)
  ;; fly past comments when stepping forwads/backwards in proof
  (setq proof-script-fly-past-comments t)
  ;; compile dependencies before Require
  (setq coq-compile-before-require t)
  (defun my/coq-mode-setup ()
    ;; forward and backward shortcuts
    (define-key coq-mode-map (kbd "M-n") #'proof-assert-next-command-interactive)
    (define-key coq-mode-map (kbd "M-p") #'proof-undo-last-successful-command)
    (define-key coq-mode-map (kbd "C-x p") #'proof-three-window-toggle)

)
  (add-hook 'coq-mode-hook (lambda () (undo-tree-mode 1)))
  (add-hook 'coq-mode-hook (lambda () (set-input-method "TeX")))
  (add-hook 'coq-mode-hook #'my/coq-mode-setup))

;; Moves subscript _a to \_a
(defvar sm-quail-activate-hook-done nil)
(defun sm-quail-activate-hook ()
  (unless (member (quail-name) sm-quail-activate-hook-done)
    (push (quail-name) sm-quail-activate-hook-done)
    (when (member (quail-name) '("TeX"))
      ;; Copy the "_..." bindings to "\_...".
      (setf (alist-get ?_ (cdr (alist-get ?\\ (quail-map))))
            (alist-get ?_ (quail-map)))
      ;; Remove the "_..." bindings.
      (setf (alist-get ?_ (quail-map)) nil)
      )))
(add-hook 'quail-activate-hook #'sm-quail-activate-hook)

(use-package math-symbol-lists
  :config


  ;; Automatically use math input method for Coq files
  ;; (add-hook 'coq-mode-hook (lambda () (set-input-method "math")))

  (quail-define-package "math" "UTF-8" "Ω" t)
  (quail-define-rules ; add whatever extra rules you want to define here...
   ("\\fun"    ?λ)
   ("\\mult"   ?⋅)
   ("\\ent"    ?⊢)
   ("\\valid"  ?✓)
   ("\\diamond" ?◇)
   ("\\box"    ?□)
   ("\\bbox"   ?■)
   ("\\later"  ?▷)
   ("\\pred"   ?φ)
   ("\\and"    ?∧)
   ("\\or"     ?∨)
   ("\\comp"   ?∘)
   ("\\ccomp"  ?◎)
   ("\\all"    ?∀)
   ("\\ex"     ?∃)
   ("\\to"     ?→)
   ("\\sep"    ?∗)
   ("\\lc"     ?⌜)
   ("\\rc"     ?⌝)
   ("\\Lc"     ?⎡)
   ("\\Rc"     ?⎤)
   ("\\lam"    ?λ)
   ("\\empty"  ?∅)
   ("\\Lam"    ?Λ)
   ("\\Sig"    ?Σ)
   ("\\-"      ?∖)
   ("\\aa"     ?●)
   ("\\af"     ?◯)
   ("\\auth"   ?●)
   ("\\frag"   ?◯)
   ("\\iff"    ?↔)
   ("\\gname"  ?γ)
   ("\\incl"   ?≼)
   ("\\latert" ?▶)
   ("\\update" ?⇝)
   ("\\lBr ?⟦)
  ("\\rBr ?⟧)

  ("\\DDelta" ?Δ)

  ;; accents (for iLöb)
  ("\\\"o" ?ö)

  ;; subscripts and superscripts
  ("^^+" ?⁺) ("__+" ?₊) ("^^-" ?⁻)
  ("__0" ?₀) ("__1" ?₁) ("__2" ?₂) ("__3" ?₃) ("__4" ?₄)
  ("__5" ?₅) ("__6" ?₆) ("__7" ?₇) ("__8" ?₈) ("__9" ?₉)

  ("__a" ?ₐ) ("__e" ?ₑ) ("__h" ?ₕ) ("__i" ?ᵢ) ("__k" ?ₖ)
  ("__l" ?ₗ) ("__m" ?ₘ) ("__n" ?ₙ) ("__o" ?ₒ) ("__p" ?ₚ)
  ("__r" ?ᵣ) ("__s" ?ₛ) ("__t" ?ₜ) ("__u" ?ᵤ) ("__v" ?ᵥ) ("__x" ?ₓ)
  )
(mapc (lambda (x)
        (if (cddr x)
            (quail-defrule (cadr x) (car (cddr x)))))
      (append math-symbol-list-basic math-symbol-list-extended))
)


(use-package company-coq
  :defer t
  :init
  (add-hook 'coq-mode-hook 'company-coq-mode)
  :config  
  (setq company-coq-disabled-features '(prettify-symbols spinner))
  ;; enable features features like autocompletion of externally
  ;; defined symbols, tactics, notations etc.
  (setq company-coq-live-on-the-edge t))
#+END_SRC

** OCaml
#+BEGIN_SRC emacs-lisp
(let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
  (when (and opam-share (file-directory-p opam-share))
    (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
    (autoload 'merlin-mode "merlin" nil t nil)
    (add-hook 'tuareg-mode-hook 'merlin-mode t)
    (add-hook 'caml-mode-hook 'merlin-mode t)
    (autoload 'ocp-setup-indent "ocp-indent" )
    (autoload 'ocp-indent-caml-mode-setup "ocp-indent")
    (add-hook 'tuareg-mode-hook 'ocp-setup-indent t)
    (add-hook 'caml-mode-hook 'ocp-indent-caml-mode-setup  t)
    (autoload 'ocp-index-mode "ocp-index")
    (add-hook 'tuareg-mode-hook 'ocp-index-mode t)
    (add-hook 'caml-mode-hook 'ocp-index-mode t)))

(use-package tuareg
  :mode (("\\.ml[ily]?$" . tuareg-mode)
         ("\\.topml$" . tuareg-mode)
         ("\\.ocamlinit$" . tuareg-mode)
         ("^dune$" . dune-mode)
         ("^dune-project$" . dune-mode)
         ("^dune-workspace$" . dune-mode)))

(use-package merlin
  :custom
  (merlin-completion-with-doc t)
  (merlin-error-check-then-move nil)
  (merlin-command 'opam)
  (merlin-error-after-save t)
  (merlin-locate-preference 'mli)
  :bind (:map merlin-mode-map
              ("M-." . merlin-locate)
              ("M-," . merlin-pop-stack)
              ("M-?" . merlin-occurrences)
              ("C-c m j" . merlin-jump)
              ("C-c m i" . merlin-locate-ident)
              ("C-c m e" . merlin-iedit-occurrences)
              ("C-c m d" . merlin-document)))
#+END_SRC

* Extras
** Functions
   #+BEGIN_SRC emacs-lisp
   (defun move-line-down ()
     "Move current line a line down."
     (interactive)
     (let ((col (current-column)))
       (save-excursion
         (forward-line)
         (transpose-lines 1))
       (forward-line)
       (move-to-column col)))

   (defun move-line-up ()
     "Move current line a line up."
     (interactive)
     (let ((col (current-column)))
       (save-excursion
         (forward-line)
         (transpose-lines -1))
       (move-to-column col)))

   (defun rename-file-and-buffer (new-name)
     "Renames both current buffer and file it's visiting to NEW-NAME."
     (interactive "sNew name: ")
     (let ((name (buffer-name))
           (filename (buffer-file-name)))
       (if (not filename)
           (message "Buffer '%s' is not visiting a file!" name)
         (if (get-buffer new-name)
             (message "A buffer named '%s' already exists!" new-name)
           (progn
             (rename-file name new-name 1)
             (rename-buffer new-name)
             (set-visited-file-name new-name)
             (set-buffer-modified-p nil))))))

   (defun duplicate-line (arg)
     "Duplicate current line, leaving point in lower line."
     (interactive "*p")

     ;; save the point for undo
     (setq buffer-undo-list (cons (point) buffer-undo-list))

     ;; local variables for start and end of line
     (let ((bol (save-excursion (beginning-of-line) (point)))
           eol)
       (save-excursion

         ;; don't use forward-line for this, because you would have
         ;; to check whether you are at the end of the buffer
         (end-of-line)
         (setq eol (point))

         ;; store the line and disable the recording of undo information
         (let ((line (buffer-substring bol eol))
               (buffer-undo-list t)
               (count arg))
           ;; insert the line arg times
           (while (> count 0)
             (newline)         ;; because there is no newline in 'line'
             (insert line)
             (setq count (1- count)))
           )

         ;; create the undo information
         (setq buffer-undo-list (cons (cons eol (point)) buffer-undo-list)))
       ) ; end-of-let

     ;; put the point in the lowest line and return
     (next-line arg))
   #+END_SRC

** Keybindings
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-j")
                   (lambda ()
                     (interactive)
                     (join-line -1)))

   (global-set-key (kbd "<C-S-down>") 'move-line-down)
   (global-set-key (kbd "<C-S-up>") 'move-line-up)

   (global-set-key (kbd "<C-S-down>") 'move-line-down)
   (global-set-key (kbd "<C-S-up>") 'move-line-up)

   (setq compilation-read-command nil)
   (global-set-key (kbd "C-c m") 'compile)

   (global-set-key (kbd "M-*") 'pop-tag-mark)

   (global-set-key (kbd "C-c d") 'duplicate-line)
   #+END_SRC

** Show lines when prompting
   #+BEGIN_SRC emacs-lisp
   (global-set-key [remap goto-line] 'goto-line-with-feedback)
   (defun goto-line-with-feedback ()
     "Show line numbers temporarily, while prompting for the line number input."
     (interactive)
     (unwind-protect
         (progn
           (linum-mode 1)
           (goto-line (read-number "Goto line: ")))
       (linum-mode -1)))
   #+END_SRC

** Automatically convert line endings to unix
   #+BEGIN_SRC emacs-lisp
   (defun no-junk-please-were-unixish ()
     (let ((coding-str (symbol-name buffer-file-coding-system)))
       (when (string-match "-\\(?:dos\\|mac\\)$" coding-str)
         (set-buffer-file-coding-system 'unix))))

   (add-hook 'find-file-hooks 'no-junk-please-were-unixish)
   #+END_SRC
** orgmode
   #+BEGIN_SRC emacs-lisp
   ;; fontify code in code blocks
   (setq org-src-fontify-natively t)
   (setq org-src-tab-acts-natively t)
   (setq org-src-preserve-indentation nil
         org-edit-src-content-indentation 0)
   (use-package htmlize)
   (require 'org)
   (require 'ox-latex)
   (add-to-list 'org-latex-packages-alist '("" "minted"))
   (setq org-latex-listings 'minted)
   ;; remove javascript from html export   
   ;; (setq org-html-head-include-scripts nil)

   (setq org-latex-pdf-process
         '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
           "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
           "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

   (setq org-src-fontify-natively t)

   (add-to-list 'org-latex-classes
                '("notes"
                  "\\documentclass[a4paper]{article}
                   \\usepackage[hyperfootnotes=false]{hyperref}
                   \\usepackage[svgnames]{xcolor}
                   \\usepackage[tt = false]{libertine}
                   \\usepackage{graphicx}
                   \\usepackage{parskip}
                  "
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                )

   (org-babel-do-load-languages
    'org-babel-load-languages
    '((R . t)
      (latex . t)))
   #+END_SRC


** Markdown
   #+begin_src emacs-lisp
   (use-package markdown-mode
     :ensure t
     :commands (markdown-mode gfm-mode)
     :mode (("README\\.md\\'" . gfm-mode)
            ("\\.md\\'" . markdown-mode)
            ("\\.markdown\\'" . markdown-mode))
     :init (setq markdown-command "multimarkdown"))
   #+end_src

** Hungry/Contextual backspace
   #+BEGIN_SRC emacs-lisp
   (defun contextual-backspace ()
     "Hungry whitespace or delete word depending on context."
     (interactive)
     (if (looking-back "[[:space:]\n]\\{2,\\}" (- (point) 2))
         (while (looking-back "[[:space:]\n]" (- (point) 1))
           (delete-char -1))
       (cond
        ((and (boundp 'smartparens-strict-mode)
              smartparens-strict-mode)
         (sp-backward-kill-word 1))
        ((and (boundp 'subword-mode)
              subword-mode)
         (subword-backward-kill 1))
        (t
         (backward-kill-word 1)))))

   (global-set-key (kbd "C-<backspace>") 'contextual-backspace) ;
   #+END_SRC
** docker
   #+BEGIN_SRC emacs-lisp
   (use-package docker
     :bind ("C-c d" . docker))
   (use-package dockerfile-mode
     :config
     (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
   (use-package docker-compose-mode)
   #+END_SRC
